{"name":"revalidator-model","tagline":"simple models using revalidator","body":"# Synopsis\r\n\r\n**revalidator-model** is a simple model library based on [revalidator](https://github.com/flatiron/revalidator).\r\n\r\n[![stability 2 - unstable](http://b.repl.ca/v1/stability-2_--_unstable-yellow.png)](http://nodejs.org/api/documentation.html#documentation_stability_index) [![license - Unlicense](http://b.repl.ca/v1/license-Unlicense-lightgrey.png)](http://unlicense.org/) [![Flattr this](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=pluma&url=https://github.com/pluma/revalidator-model)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/revalidator-model.png?branch=master)](https://travis-ci.org/pluma/revalidator-model) [![Coverage Status](https://coveralls.io/repos/pluma/revalidator-model/badge.png?branch=master)](https://coveralls.io/r/pluma/revalidator-model?branch=master) [![Dependencies](https://david-dm.org/pluma/revalidator-model.png?theme=shields.io)](https://david-dm.org/pluma/revalidator-model)\r\n\r\n[![NPM status](https://nodei.co/npm/revalidator-model.png?compact=true)](https://npmjs.org/package/revalidator-model)\r\n\r\n# Install\r\n\r\n## With NPM\r\n\r\n```sh\r\nnpm install revalidator-model\r\n```\r\n\r\n## From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/revalidator-model.git\r\ncd revalidator-model\r\nnpm install\r\nmake test\r\n```\r\n\r\n# Usage Example\r\n\r\n```javascript\r\nvar model = require('revalidator-model');\r\nvar List = model({\r\n    properties: {\r\n        items: {type: 'array'}\r\n    },\r\n    proto: {\r\n        size: function() {\r\n            return this.items.length;\r\n        }\r\n    },\r\n    defaults: {\r\n        flavor: 'pungent'\r\n    },\r\n    hydrate: {\r\n        items: function(val) {\r\n            return val.split(', ');\r\n        }\r\n    },\r\n    dehydrate: {\r\n        items: function(val) {\r\n            return val.join(', ');\r\n        }\r\n    }\r\n});\r\nvar list = List.hydrate({items: 'foo, bar, qux', foo: 'bar'});\r\nconsole.log(list.items); // ['foo', 'bar', 'qux']\r\nconsole.log(list.size()); // 3\r\nconsole.log(list.flavor); // 'pungent'\r\nconsole.log(list.dehydrate()); // {items: 'foo, bar, qux'}\r\nconsole.log(list.validate()); // {valid: true, errors: []}\r\nvar list2 = new List({items: 5, flavor: 'spicy'});\r\nconsole.log(list2.flavor); // 'spicy';\r\nconsole.log(list2.items); // 5\r\nconsole.log(list2.validate().valid); // false\r\nlist2.dehydrate(); // fails with error: \"Object 5 has no method split.\"\r\n```\r\n\r\n# API\r\n\r\n## model(schema:Object):Model\r\n\r\nCreates a `Model` with the given revalidator `schema`.\r\n\r\nIn addition to the properties recognized by `revalidator` (`properties`, `patternProperties`, `additionalProperties`), the `schema` can have the following properties:\r\n\r\n### schema.proto:Object (optional)\r\n\r\nThe `prototype` instances of the `Model` should inherit from. Use this to specify methods you want to have access to on your model's instances.\r\n\r\n### schema.defaults:Object (optional)\r\n\r\nDefault property values to be copied to new instances of this\r\n`Model`. Arrays and objects will be deep-cloned.\r\n\r\n### schema.hydrate:Function (optional)\r\n\r\nA [transformation](https://github.com/pluma/transform-object) that will be applied to objects processed by your model's `hydrate` method.\r\n\r\n### schema.dehydrate:Function (optional)\r\n\r\nA [transformation](https://github.com/pluma/transform-object) that will be applied to model instance when processed by its `dehydrate` method.\r\n\r\n## new Model(data:Object):Instance\r\n\r\nCreates a new instance with the given `data`. Use of the `new` keyword is optional.\r\n\r\nAny properties of the given `data` object that are not recognized will be ignored.\r\n\r\n## Model.hydrate(data:Object):Instance\r\n\r\nSee `schema.hydrate`. Hydrates the object from the given `data` and returns a new `Model` instance.\r\n\r\n## Model.schema:Object\r\n\r\nThe `schema` that was used to create this `Model`.\r\n\r\n## Model.validate(data:Object):Object\r\n\r\nValidates the given `data` against the `Model`'s schema using `revalidator`. The result object has two attributes:\r\n\r\n### valid:Boolean\r\n\r\nWhether the data passed validation.\r\n\r\n### errors:Array\r\n\r\nAn array of error messages if the validation failed.\r\n\r\n## Model#validate():Object\r\n\r\nValidates the instance. Shorthand for `Model.validate(instance)`.\r\n\r\n## Model#dehydrate():Object\r\n\r\nSee `schema.dehydrate`. Dehydrates the instance's data and returns it.\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/revalidator-model/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}